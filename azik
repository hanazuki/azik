#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

GODAN = [
  %w[あ い う え お],
  %w[ぁ ぃ ぅ ぇ ぉ],
  %w[か き く け こ],
  %w[が ぎ ぐ げ ご],
  %w[さ し す せ そ],
  %w[ざ じ ず ぜ ぞ],
  %w[た ち つ て と],
  %w[だ ぢ づ で ど],
  %w[な に ぬ ね の],
  %w[は ひ ふ へ ほ],
  %w[ば び ぶ べ ぼ],
  %w[ぱ ぴ ぷ ぺ ぽ],
  %w[ま み む め も],
  %w[や い ゆ いぇ よ],
  %w[ゃ ぃ ゅ ぇ ょ],
  %w[ら り る れ ろ],
  %w[わ うぃ う うぇ を],
]

CONSONENT_MAP = {
  '' => 'あ',
  'k' => 'か',
  %w[ky kg] => 'きゃ',
  'g' => 'が',
  %w[gy gg] => 'ぎゃ',
  's' => 'さ',
  %w[sy sg x] => 'しゃ',
  'z' => 'ざ',
  %w[zy zg j] => 'じゃ',
  't' => 'た',
  %w[ty tg c] => 'ちゃ',
  'd' => 'だ',
  %w[dy dg] => 'ぢゃ',
  'ts' => 'つぁ',
  'n' => 'な',
  %w[ny ng] => 'にゃ',
  'h' => 'は',
  %w[hy hg] => 'ひゃ',
  'b' => 'ば',
  %w[by bg] => 'びゃ',
  'p' => 'ぱ',
  %w[py pg] => 'ぴゃ',
  'f' => 'ふぁ',
  %w[fy fg] => 'ふゃ',
  'v' => 'ゔぁ',
  %w[vy vg] => 'ゔゃ',
  'm' => 'ま',
  %w[my mg] => 'みゃ',
  'y' => 'や',
  'r' => 'ら',
  %w[ry rg] => 'りゃ',
  'w' => 'わ',
}

SMALL_MAP = {
  'あ' => 'ぁ',
  'い' => 'ぃ',
  'う' => 'ぅ',
  'え' => 'ぇ',
  'お' => 'ぉ',
  'か' => 'ゕ',
  'け' => 'ゖ',
  'つ' => 'っ',
  'や' => 'ゃ',
  'ゆ' => 'ゅ',
  'よ' => 'ょ',
  'わ' => 'ゎ',
}

IRREGULAR_MAP = {
  'xi' => 'し',
  'ji' => 'じ',
  'ci' => 'ち',
  'fu' => 'ふ',
  'tsu' => 'つ',
  'vu' => 'ゔ',

  'wso' => 'うぉ',
  'tgi' => 'てぃ',
  'dci' => 'でぃ',
  'wyi' => 'ゐ',
  'wye' => 'ゑ',
}

STATIC_MAP = {
  'nn' => 'ん',
  'n' => 'ん',
  'q' => 'ん',
  '-' => 'ー',
  '~' => '〜',
  '.' => '。',
  ',' => '、',
  '[' => '「',
  ']' => '」',
  ';' => 'っ',
  ':' => 'ー',
  'z/' => '・',
  'z.' => '…',
  'z,' => '‥',
  'z-' => '〜',
  'z[' => '『',
  'z]' => '』',
  'z;' => '；',
  'z:' => '：',
}

VOWELS = %w[a i u e o]

COMPOUND_VOWELS_MAP = {
  'z' => 'aん',
  'n' => 'aん',
  'k' => 'iん',
  'j' => 'uん',
  'd' => 'eん',
  'l' => 'oん',
  'q' => 'aい',
  'h' => 'uう',
  'w' => 'eい',
  'p' => 'oう',
}

def change_vowel(base, vowel)
  head, tail = base[0..-2], base[-1..-1]
  if i = VOWELS.index(vowel)
    tail = GODAN.find{|row| row[0] == tail}[i]
    head + tail if tail != '-'
  end
end

map = {}
def map.set(k, v)
  if u = self[k]
    fail "Conflict on #{k}: #{u}, #{v}"
  end
  store(k, v)
end

CONSONENT_MAP.each do |cc, base|
  [*cc].each do |c|
    VOWELS.each do |v|
      if w = IRREGULAR_MAP[c + v] || change_vowel(base, v)
        map.set(c + v, w)
        map.set('l' + c + v, w) if w = SMALL_MAP[w]
      end
    end

    unless c.empty?
      COMPOUND_VOWELS_MAP.each do |k, v|
        head, tail = v[0], v[1..-1]
        if w = (IRREGULAR_MAP[c + head] || change_vowel(base, head)) + tail
          map.set(c + k, w)
        end
      end
    end
  end
end

IRREGULAR_MAP.each do |k, w|
  unless map[k]
    map.set(k, w)

    c, v = k[0..-2], k[-1..-1]
    COMPOUND_VOWELS_MAP.each do |cv, cw|
      if cw.chr == v
        map.set(c + cv, w + cw[1..-1])
      end
    end
  end
end

map.update(STATIC_MAP)

map.each do |rom, kana|
  puts [rom, kana].join(?\t)
end
